<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="(1024, 768)" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="IBLT" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;&amp;#10;from psychopy import  visual, core, gui, data, event, monitors, sound, iohub&amp;#10;import copy, time, os, sys, random #from the std python libs&amp;#10;from psychopy.tools.filetools import fromFile, toFile&amp;#10;from comppsychHelper import *&amp;#10;#import pylinkwrapper&amp;#10;&amp;#10;&amp;#10;# update march 2018-- include control variables which switch tracker on or off, use jitter or not for outcomes, control length of blocks&amp;#10;&amp;#10;# control variables&amp;#10;usetrack=0      # use the eyetracker&amp;#10;usejitter=0     # jitter timings (e.g. for eye tracker)&amp;#10;blocklength=[80,80,80]    # number and length of blocks&amp;#10;leftstimx=-6    # x position left stimulus&amp;#10;rightstimx=6    # x position right stimulus&amp;#10;stimy=0         # y position main stimuli&amp;#10;outy=2.2        # y distance between main stimulus and outcome text&amp;#10;stimsize=1.8    # size of stimuli&amp;#10;boxwidth=1.6    # width of choice box&amp;#10;fixdur=1        # duration of fixation in secs&amp;#10;monitordur=1    # duration of monitor in secs&amp;#10;outcomedur1=0.5   # duration of first outcome in secs (if not jittered) (previously 1)&amp;#10;outcomedur2=0.5   # duration of second outcome in secs (if not jittered) (previously 1)&amp;#10;totmon=1.5      # starting amount of money&amp;#10;winloss=0.15    # amount won or lost per trial&amp;#10;main_dir=os.getcwd()   # where psychopy script is being run from&amp;#10;winsound=sound.Sound(os.path.join(main_dir, 'stimuli','cha_ching.wav'))   # sound to play on win&amp;#10;losssound=sound.Sound(os.path.join(main_dir,'stimuli','error2.wav'))     # sound to play on loss&amp;#10;minjit=2        # min jitter duration in secs&amp;#10;maxjit=6        # max jitter duration in secs&amp;#10;#stimlets=[''F','G','h','K','o','b','f','j','i']      # letters to be used as stimuli&amp;#10;stimlets=['F','G']      # letters to be used as stimuli&amp;#10;&amp;#10;blocknum=1      # counter for blocks&amp;#10;&amp;#10;&amp;#10;#if len(stimlets) &lt; len(blocklength)*2:&amp;#10;#    sys.exit(&quot;not enought letter stimuli!&quot;)&amp;#10;&amp;#10;os.chdir(main_dir)&amp;#10;&amp;#10;# date as month, day hour min&amp;#10;&amp;#10;dateStr = time.strftime(&quot;%b_%d_%H%M&quot;, time.localtime())#add the current time&amp;#10;&amp;#10;# experiment inf&amp;#10;expInfo = {'Subject Num':'', 'Block Order':1, 'dateStr':dateStr}&amp;#10;&amp;#10;# window stuff&amp;#10;mm=monitors.Monitor('testMonitor')&amp;#10;monsize=mm.getSizePix()&amp;#10;&amp;#10;&amp;#10;&amp;#10;# get subject number and block order&amp;#10;while expInfo['Subject Num']=='' or (expInfo['Block Order']!= 1 and expInfo['Block Order']!=2):&amp;#10;    enterSubjInfo(expInfo, 'simple voltrain experiment')&amp;#10;&amp;#10;&amp;#10;# import experiment schedule&amp;#10;Sched=data.importConditions(os.path.join(main_dir,'schedules','2_opt_linked_80_10.xlsx'))   # ths should point to the schedule file&amp;#10;if sum(blocklength) != len(Sched):&amp;#10;    sys.exit(&quot;length of blocks does not sum to length of trials&quot;)&amp;#10;&amp;#10;#edit this line above to short_version to run only 10 lines&amp;#10;#should normally be 2_opt_linked_80_10&amp;#10;#Block order 2 swaps winpos and losspos in schedule file!&amp;#10;if expInfo['Block Order']==2:&amp;#10;    wp=[d['winpos'] for d in Sched]&amp;#10;    lp=[d['losspos'] for d in Sched]&amp;#10;    for a in range(0,Sched.__len__()):&amp;#10;        Sched[a]['winpos']=lp[a]&amp;#10;        Sched[a]['losspos']=wp[a]&amp;#10;&amp;#10;#make a text file to save data&amp;#10;fileName = expInfo['Subject Num'] + '_' + expInfo['dateStr']&amp;#10;dataFile = open(os.path.join(main_dir,'results',fileName+'.txt'), 'w')#a simple text file with 'taba-separated-values'&amp;#10;&amp;#10;# data collected for each trial&amp;#10;trialdat=['Trialnumber','Winpos','Losspos','Side','Order','Choice','RT','Choiceside','Winchosen','LossChosen','TotalMoney','Fixonset','Choiceonset','Monitoronset','Winresonset','Lossresonset','stima','stimb','Blocknum']&amp;#10;&amp;#10;&amp;#10;# write basic info, task parameters and headers&amp;#10;writeToFile(dataFile,['Subject Num',expInfo['Subject Num'],'Block Order',expInfo['Block Order'],'date',expInfo['dateStr']])&amp;#10;writeToFile(dataFile,trialdat)&amp;#10;&amp;#10;#create window and stimuli&amp;#10;win = visual.Window(monsize,fullscr=True,allowGUI=False, monitor='testMonitor', units='deg', screen=1)&amp;#10;stima = visual.TextStim(win,text='a', units='deg', color='black',font='agathodaimon',height=stimsize)&amp;#10;stimb = visual.TextStim(win,text='b', units='deg', color='black',font='agathodaimon',height=stimsize)&amp;#10;choicebox=visual.ShapeStim(win, units='deg', lineWidth=4, fillColor='grey', lineColor='black',fillColorSpace='rgb', vertices=((-boxwidth, -boxwidth), (-boxwidth, boxwidth), (boxwidth, boxwidth),(boxwidth,-boxwidth)))&amp;#10;winmes=visual.TextStim(win,text='win',colorSpace='rgb',color=[0.0, 1.0, 0.0])&amp;#10;lossmes=visual.TextStim(win,text='loss',colorSpace='rgb',color=[1.0, 0.0 ,0.0])&amp;#10;fixation = visual.TextStim(win,text='X',color='black')&amp;#10;tottext=visual.TextStim(win,text=u'Total \xa3'+ str(totmon),units='deg',color='black',height=1, pos=(0.0,-2))&amp;#10;&amp;#10;#Initiate eye-tracker link and open EDF&amp;#10;if usetrack:&amp;#10;    trackname=expInfo['Subject Num'][0:4]+'_t'&amp;#10;    tracker = pylinkwrapper.Connect(win, trackname)   # note edf filename must be less than 9 characters. Use this and then rename on transfer. If you need to get it off the eyelink, look for file which is first 5 lets of subname then _t&amp;#10;&amp;#10;# Calibrate eye-tracker&amp;#10;    tracker.calibrate()&amp;#10;&amp;#10;#and some handy clocks to keep track of time&amp;#10;globalClock = core.Clock()&amp;#10;&amp;#10;# set up stim&amp;#10;#random.shuffle(stimlets)&amp;#10;stimcount=0&amp;#10;stima.setText(stimlets[stimcount])&amp;#10;stimb.setText(stimlets[stimcount+1])&amp;#10;&amp;#10;# set mouse up&amp;#10;mouse = event.Mouse(visible=False, newPos=None, win=win)&amp;#10;&amp;#10;#display instructions and wait&amp;#10;pauseclick(&quot;Press left or right to select a shape\nTry to win as much money as possible\n\nClick Either Button to Start&quot;,win,mouse)&amp;#10;&amp;#10;&amp;#10;#timer for task&amp;#10;taskclock=core.Clock()&amp;#10;taskclock.reset()&amp;#10;trialhandle=data.TrialHandler(Sched, nReps=1, method='sequential', dataTypes=trialdat, extraInfo=None, seed=None, originPath=None, name='', autoLog=True)&amp;#10;&amp;#10;&amp;#10;&amp;#10;#start tracker&amp;#10;if usetrack:&amp;#10;    tracker.record_on()&amp;#10;ntrial=0&amp;#10;#for indtrial in range(0,10):&amp;#10;for thistrial in trialhandle:&amp;#10;    #thistrial=trialhandle.next()&amp;#10;    &amp;#10;    trialhandle.data.add('Trialnumber',ntrial+1)&amp;#10;    # allow to escape window&amp;#10;    if 'escape' in event.getKeys():&amp;#10;        core.quit()&amp;#10;    &amp;#10;    trialclock=core.Clock()&amp;#10;    rtclock=core.Clock()&amp;#10;    trialclock.reset()&amp;#10;    &amp;#10;    # use for timing of stimuli&amp;#10;    countDown = core.CountdownTimer()&amp;#10;    countDown.add(fixdur)&amp;#10;    &amp;#10;    trialhandle.data.add('stima',stima.text)&amp;#10;    trialhandle.data.add('stimb',stimb.text)&amp;#10;    # present fixation cross for 500ms&amp;#10;    fixation.draw()&amp;#10;    tottext.draw()&amp;#10;    fixonset=taskclock.getTime()&amp;#10;    if usetrack:&amp;#10;        msg='Fixation trial %d' % (ntrial+1)&amp;#10;        tracker.send_message(msg)&amp;#10;    win.flip()&amp;#10;    while countDown.getTime()&gt;0:&amp;#10;        pass&amp;#10;    trialhandle.data.add('Fixonset',fixonset)&amp;#10;    #now present both stimuli until choice made&amp;#10;    if Sched[ntrial]['side'] == 1:&amp;#10;        stima.setPos([leftstimx,stimy])&amp;#10;        stimb.setPos([rightstimx,stimy])&amp;#10;    else:&amp;#10;        stimb.setPos([leftstimx,stimy])&amp;#10;        stima.setPos([rightstimx,stimy])&amp;#10;        &amp;#10;    fixation.draw()&amp;#10;    tottext.draw()&amp;#10;    stima.draw()&amp;#10;    stimb.draw()&amp;#10;    if usetrack:&amp;#10;        msg='Choice trial %d' % (ntrial+1)&amp;#10;        tracker.send_message(msg)&amp;#10;    choiceonset=taskclock.getTime()&amp;#10;    win.flip()&amp;#10;    rtclock.reset()&amp;#10;    left_press=False&amp;#10;    right_press=False&amp;#10;    mouse.clickReset()&amp;#10;    while True not in (left_press, right_press):&amp;#10;        (left_press,middle_press,right_press),(left_time,mid_time,right_time)=mouse.getPressed(getTime=True)&amp;#10;    if left_press &amp; right_press:&amp;#10;        if left_time&lt;right_time:&amp;#10;            rt=left_time&amp;#10;            butpress='left'&amp;#10;        else:&amp;#10;            rt=right_time&amp;#10;            butpress='right'&amp;#10;    if left_press:&amp;#10;        rt=left_time&amp;#10;        butpress='left'&amp;#10;    if right_press:&amp;#10;        rt=right_time&amp;#10;        butpress='right'&amp;#10;    #resp=event.waitKeys(keyList=['b','m'], timeStamped=rtclock)&amp;#10;    trialhandle.data.add('Choiceside', butpress)&amp;#10;    trialhandle.data.add('RT', rt)&amp;#10;    trialhandle.data.add('Choiceonset',choiceonset)&amp;#10;    # put the choice box in the correct place, work out which option was chosen and whether a win and/or loss was received&amp;#10;    &amp;#10;    if butpress=='left':                                 #chose left option&amp;#10;        choicebox.setPos([leftstimx,stimy])&amp;#10;        if Sched[ntrial]['side']==1:                # option 1 on left&amp;#10;            trialhandle.data.add('Choice',1)        #chose option 1&amp;#10;            if Sched[ntrial]['winpos']==1:          # win for option 1&amp;#10;                trialhandle.data.add('Winchosen',1)&amp;#10;                totmon=totmon+winloss&amp;#10;            else:&amp;#10;                trialhandle.data.add('Winchosen',0)&amp;#10;            if Sched[ntrial]['losspos']==1:         # loss for option 1&amp;#10;                trialhandle.data.add('Losschosen',1)&amp;#10;                totmon=totmon-winloss&amp;#10;            else:&amp;#10;                trialhandle.data.add('Losschosen',0)&amp;#10;        else:                                       # option 1 on right&amp;#10;            trialhandle.data.add('Choice',0)        # chose option 2&amp;#10;            if Sched[ntrial]['winpos']==1:          # win for option 1&amp;#10;                trialhandle.data.add('Winchosen',0)&amp;#10;            else:&amp;#10;                trialhandle.data.add('Winchosen',1)&amp;#10;                totmon=totmon+winloss&amp;#10;            if Sched[ntrial]['losspos']==1:         # loss for option 1&amp;#10;                trialhandle.data.add('Losschosen', 0)&amp;#10;            else:&amp;#10;                trialhandle.data.add('Losschosen',1)&amp;#10;                totmon=totmon-winloss&amp;#10;    else:                                           # chose right option&amp;#10;        choicebox.setPos([rightstimx,stimy])&amp;#10;        if Sched[ntrial]['side']==1:  &amp;#10;            trialhandle.data.add('Choice',0)        #chose option 2&amp;#10;            if Sched[ntrial]['winpos']==1:          # win for option 1&amp;#10;                trialhandle.data.add('Winchosen',0)&amp;#10;            else:&amp;#10;                trialhandle.data.add('Winchosen',1)&amp;#10;                totmon=totmon+winloss&amp;#10;            if Sched[ntrial]['losspos']==1:         # loss for option 1&amp;#10;                trialhandle.data.add('Losschosen', 0)&amp;#10;            else:&amp;#10;                trialhandle.data.add('Losschosen',1)&amp;#10;                totmon=totmon-winloss&amp;#10;        else:                                       #chose option 1&amp;#10;            trialhandle.data.add('Choice',1)            #chose option 1&amp;#10;            if Sched[ntrial]['winpos']==1:           # win for option 1&amp;#10;                trialhandle.data.add('Winchosen',1)&amp;#10;                totmon=totmon+winloss&amp;#10;            else:&amp;#10;                trialhandle.data.add('Winchosen',0)&amp;#10;            if Sched[ntrial]['losspos']==1:             # loss for option 1&amp;#10;                trialhandle.data.add('Losschosen',1)&amp;#10;                totmon=totmon-winloss&amp;#10;            else:&amp;#10;                trialhandle.data.add('Losschosen',0)&amp;#10;    &amp;#10;  &amp;#10;        &amp;#10;    # present participant choice&amp;#10;  &amp;#10;    fixation.draw()&amp;#10;    tottext.draw()&amp;#10;    choicebox.draw()&amp;#10;    stima.draw()&amp;#10;    stimb.draw()&amp;#10;    if usetrack:&amp;#10;        msg='Monitor trial %d' % (ntrial+1)&amp;#10;        tracker.send_message(msg)&amp;#10;    monitoronset=taskclock.getTime()&amp;#10;    win.flip()&amp;#10;    countDown.reset()&amp;#10;    countDown.add(monitordur)&amp;#10;    while countDown.getTime()&gt;0:&amp;#10;        pass&amp;#10;    trialhandle.data.add('Monitoronset',monitoronset)&amp;#10;    # now present outcomes&amp;#10;    &amp;#10;    if Sched[ntrial]['order']==1:                   # i.e. win first&amp;#10;        # present win&amp;#10;        &amp;#10;        if Sched[ntrial]['winpos']==1:              #i.e. win for option 1&amp;#10;            if Sched[ntrial]['side']==1:             #option 1 on left&amp;#10;                winmes.setPos([leftstimx,outy])&amp;#10;            else:&amp;#10;                winmes.setPos([rightstimx,outy])    #option 1 on right&amp;#10;        else:                                       # win for option 2&amp;#10;            if Sched[ntrial]['side']==1:             #option 1 on left&amp;#10;                winmes.setPos([rightstimx,outy])&amp;#10;            else:&amp;#10;                winmes.setPos([leftstimx,outy])    #option 1 on right&amp;#10;        &amp;#10;        fixation.draw()&amp;#10;        tottext.draw()&amp;#10;        choicebox.draw()&amp;#10;        stima.draw()&amp;#10;        stimb.draw()&amp;#10;        winmes.draw()&amp;#10;        if usetrack:&amp;#10;            msg='Win Outcome trial %d' % (ntrial+1)&amp;#10;            tracker.send_message(msg)&amp;#10;        winresonset=taskclock.getTime()&amp;#10;        if trialhandle.data['Winchosen'][ntrial]==1:&amp;#10;            winsound.play()&amp;#10;        win.flip()&amp;#10;        # present for outcome duration&amp;#10;        countDown.reset()&amp;#10;        if usejitter:&amp;#10;            countDown.add(flatjitter(minjit,maxjit,10))&amp;#10;        else:&amp;#10;            countDown.add(outcomedur1)&amp;#10;            &amp;#10;        while countDown.getTime()&gt;0:&amp;#10;            core.wait(0.05)&amp;#10;        &amp;#10;        #now present loss&amp;#10;        if Sched[ntrial]['losspos']==1:             #i.e. loss for option 1&amp;#10;            if Sched[ntrial]['side']==1:            # option 1 on left&amp;#10;                lossmes.setPos([leftstimx,-outy])&amp;#10;            else:                                   #option 1 on right&amp;#10;                lossmes.setPos([rightstimx,-outy])&amp;#10;        else:                                       #loss for option 2&amp;#10;            if Sched[ntrial]['side']==1:            # option 1 on left&amp;#10;                lossmes.setPos([rightstimx,-outy])&amp;#10;            else:                                   #option 1 on right&amp;#10;                lossmes.setPos([leftstimx,-outy])&amp;#10;            &amp;#10;        &amp;#10;        fixation.draw()&amp;#10;        tottext.draw()&amp;#10;        choicebox.draw()&amp;#10;        stima.draw()&amp;#10;        stimb.draw()&amp;#10;        winmes.draw()&amp;#10;        lossmes.draw()&amp;#10;        if usetrack:&amp;#10;            msg='Loss Outcome trial %d' % (ntrial+1)&amp;#10;            tracker.send_message(msg)&amp;#10;        lossresonset=taskclock.getTime()&amp;#10;        if trialhandle.data['Losschosen'][ntrial]==1:&amp;#10;            losssound.play()&amp;#10;        win.flip()&amp;#10;        # present for outcome duration&amp;#10;        countDown.reset()&amp;#10;        if usejitter:&amp;#10;            countDown.add(flatjitter(minjit,maxjit,10))&amp;#10;        else:&amp;#10;            countDown.add(outcomedur2)&amp;#10;        while countDown.getTime()&gt;0:&amp;#10;            core.wait(0.05)&amp;#10;        &amp;#10;        &amp;#10;    else:   # i.e. loss first&amp;#10;         &amp;#10;        #present loss&amp;#10;        if Sched[ntrial]['losspos']==1:             #i.e. loss for option 1&amp;#10;            if Sched[ntrial]['side']==1:            # option 1 on left&amp;#10;                lossmes.setPos([leftstimx,-outy])&amp;#10;            else:                                   #option 1 on right&amp;#10;                lossmes.setPos([rightstimx,-outy])&amp;#10;        else:                                       #loss for option 2&amp;#10;            if Sched[ntrial]['side']==1:            # option 1 on left&amp;#10;                lossmes.setPos([rightstimx,-outy])&amp;#10;            else:                                   #option 1 on right&amp;#10;                lossmes.setPos([leftstimx,-outy])&amp;#10;        &amp;#10;        fixation.draw()&amp;#10;        tottext.draw()&amp;#10;        choicebox.draw()&amp;#10;        stima.draw()&amp;#10;        stimb.draw()&amp;#10;        lossmes.draw()&amp;#10;        if usetrack:&amp;#10;            msg='Loss Outcome trial %d' % (ntrial+1)&amp;#10;            tracker.send_message(msg)&amp;#10;        lossresonset=taskclock.getTime()&amp;#10;        if trialhandle.data['Losschosen'][ntrial]==1:&amp;#10;            losssound.play()&amp;#10;        win.flip()&amp;#10;        # present for outcome duration&amp;#10;        countDown.reset()&amp;#10;        if usejitter:&amp;#10;            countDown.add(flatjitter(minjit,maxjit,10))&amp;#10;        else:&amp;#10;            countDown.add(outcomedur2)&amp;#10;            &amp;#10;        while countDown.getTime()&gt;0:&amp;#10;            core.wait(0.05)&amp;#10;        &amp;#10;        #win second&amp;#10;        if Sched[ntrial]['winpos']==1:              #i.e. win for option 1&amp;#10;            if Sched[ntrial]['side']==1:             #option 1 on left&amp;#10;                winmes.setPos([leftstimx,outy])&amp;#10;            else:&amp;#10;                winmes.setPos([rightstimx,outy])    #option 1 on right&amp;#10;        else:                                       # win for option 2&amp;#10;            if Sched[ntrial]['side']==1:             #option 1 on left&amp;#10;                winmes.setPos([rightstimx,outy])&amp;#10;            else:&amp;#10;                winmes.setPos([leftstimx,outy])    #option 1 on right&amp;#10;        &amp;#10;        fixation.draw()&amp;#10;        tottext.draw()&amp;#10;        choicebox.draw()&amp;#10;        stima.draw()&amp;#10;        stimb.draw()&amp;#10;        lossmes.draw()&amp;#10;        winmes.draw()&amp;#10;        if usetrack:&amp;#10;            msg='Win Outcome trial %d' % (ntrial+1)&amp;#10;            tracker.send_message(msg)&amp;#10;        winresonset=taskclock.getTime()&amp;#10;        if trialhandle.data['Winchosen'][ntrial]==1:&amp;#10;            winsound.play()&amp;#10;        win.flip()&amp;#10;        # present for outcome duration&amp;#10;        countDown.reset()&amp;#10;        if usejitter:&amp;#10;            countDown.add(flatjitter(minjit,maxjit,10))&amp;#10;        else:&amp;#10;            countDown.add(outcomedur1)&amp;#10;        while countDown.getTime()&gt;0:&amp;#10;            core.wait(0.05)&amp;#10;    trialhandle.data.add('Winresonset',winresonset)&amp;#10;    trialhandle.data.add('Lossresonset',lossresonset) &amp;#10;    trialhandle.data.add('TotalMoney',totmon)&amp;#10;    tottext.setText(u'Total \xa3'+ str(totmon))&amp;#10;    # write data to a file at the end of each trial to make sure nothing is lost &amp;#10;    td=trialhandle.data&amp;#10;    writeToFile(dataFile,list([int(td['Trialnumber'][ntrial]),Sched[ntrial]['winpos'],Sched[ntrial]['losspos'],Sched[ntrial]['side'],Sched[ntrial]['order'],&amp;#10;    int(td['Choice'][ntrial]),float(td['RT'][ntrial]),&quot;&quot;.join(td['Choiceside'][ntrial]),int(td['Winchosen'][ntrial]),int(td['Losschosen'][ntrial]),totmon,&amp;#10;    fixonset,choiceonset,monitoronset,winresonset,lossresonset,stima.text,stimb.text,blocknum]))&amp;#10;    &amp;#10;    ntrial+=1&amp;#10;    &amp;#10;    if any(map(lambda x: ntrial == x, np.cumsum(blocklength[:-1]))):&amp;#10;        blocknum+=1&amp;#10;        stimcount=stimcount+2&amp;#10;        stima.setText(stimlets[stimcount])&amp;#10;        stimb.setText(stimlets[stimcount+1])&amp;#10;        pauseclick(&quot;Rest Session\nPress Either Button to Restart&quot;,win,mouse)&amp;#10;    &amp;#10;if usetrack:&amp;#10;#stop tracker&amp;#10;    tracker.record_off()&amp;#10;# Retrieve EDF&amp;#10;    tracker.end_experiment(os.path.join(main_dir,'results','tracker'))&amp;#10;    os.rename(os.path.join(main_dir,'results','tracker',trackname+'.edf'),os.path.join(main_dir,'results','tracker',fileName+'_tracker.edf'))&amp;#10;&amp;#10;# just in case-- at end of task save all data again&amp;#10;trialhandle.saveAsText(os.path.join(main_dir,'results',fileName), dataOut=['Choice_raw', 'Choiceside_raw','RT_raw', 'Winchosen_raw','Losschosen_raw'])&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;win.close()&amp;#10;core.quit()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import {core, data, event, gui, iohub, monitors, sound, visual} from 'psychopy';&amp;#10;import * as copy from 'copy';&amp;#10;import * as time from 'time';&amp;#10;import * as os from 'os';&amp;#10;import * as sys from 'sys';&amp;#10;import * as random from 'random';&amp;#10;import {fromFile, toFile} from 'psychopy/tools/filetools';&amp;#10;import {*} from 'comppsychHelper';&amp;#10;var _pj;&amp;#10;var Sched, blocklength, blocknum, boxwidth, butpress, choicebox, choiceonset, countDown, dataFile, dateStr, expInfo, fileName, fixation, fixdur, fixonset, globalClock, left_press, leftstimx, lossmes, lossresonset, losssound, lp, main_dir, maxjit, minjit, mm, monitordur, monitoronset, monsize, mouse, msg, ntrial, outcomedur1, outcomedur2, outy, right_press, rightstimx, rt, rtclock, stima, stimb, stimcount, stimlets, stimsize, stimy, taskclock, td, totmon, tottext, tracker, trackname, trialclock, trialdat, trialhandle, usejitter, usetrack, win, winloss, winmes, winresonset, winsound, wp;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;usetrack = 0;&amp;#10;usejitter = 0;&amp;#10;blocklength = [80, 80, 80];&amp;#10;leftstimx = (- 6);&amp;#10;rightstimx = 6;&amp;#10;stimy = 0;&amp;#10;outy = 2.2;&amp;#10;stimsize = 1.8;&amp;#10;boxwidth = 1.6;&amp;#10;fixdur = 1;&amp;#10;monitordur = 1;&amp;#10;outcomedur1 = 0.5;&amp;#10;outcomedur2 = 0.5;&amp;#10;totmon = 1.5;&amp;#10;winloss = 0.15;&amp;#10;main_dir = os.getcwd();&amp;#10;winsound = new sound.Sound(os.path.join(main_dir, &quot;stimuli&quot;, &quot;cha_ching.wav&quot;));&amp;#10;losssound = new sound.Sound(os.path.join(main_dir, &quot;stimuli&quot;, &quot;error2.wav&quot;));&amp;#10;minjit = 2;&amp;#10;maxjit = 6;&amp;#10;stimlets = [&quot;F&quot;, &quot;G&quot;];&amp;#10;blocknum = 1;&amp;#10;os.chdir(main_dir);&amp;#10;dateStr = time.strftime(&quot;%b_%d_%H%M&quot;, time.localtime());&amp;#10;expInfo = {&quot;Subject Num&quot;: &quot;&quot;, &quot;Block Order&quot;: 1, &quot;dateStr&quot;: dateStr};&amp;#10;mm = new monitors.Monitor(&quot;testMonitor&quot;);&amp;#10;monsize = mm.getSizePix();&amp;#10;while (((expInfo[&quot;Subject Num&quot;] === &quot;&quot;) || ((expInfo[&quot;Block Order&quot;] !== 1) &amp;&amp; (expInfo[&quot;Block Order&quot;] !== 2)))) {&amp;#10;    enterSubjInfo(expInfo, &quot;simple voltrain experiment&quot;);&amp;#10;}&amp;#10;Sched = data.importConditions(os.path.join(main_dir, &quot;schedules&quot;, &quot;2_opt_linked_80_10.xlsx&quot;));&amp;#10;if ((util.sum(blocklength) !== Sched.length)) {&amp;#10;    sys.exit(&quot;length of blocks does not sum to length of trials&quot;);&amp;#10;}&amp;#10;if ((expInfo[&quot;Block Order&quot;] === 2)) {&amp;#10;    wp = function () {&amp;#10;    var _pj_a = [], _pj_b = Sched;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var d = _pj_b[_pj_c];&amp;#10;        _pj_a.push(d[&quot;winpos&quot;]);&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;    lp = function () {&amp;#10;    var _pj_a = [], _pj_b = Sched;&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var d = _pj_b[_pj_c];&amp;#10;        _pj_a.push(d[&quot;losspos&quot;]);&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;    for (var a, _pj_c = 0, _pj_a = util.range(0, Sched.__len__()), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        a = _pj_a[_pj_c];&amp;#10;        Sched[a][&quot;winpos&quot;] = lp[a];&amp;#10;        Sched[a][&quot;losspos&quot;] = wp[a];&amp;#10;    }&amp;#10;}&amp;#10;fileName = ((expInfo[&quot;Subject Num&quot;] + &quot;_&quot;) + expInfo[&quot;dateStr&quot;]);&amp;#10;dataFile = open(os.path.join(main_dir, &quot;results&quot;, (fileName + &quot;.txt&quot;)), &quot;w&quot;);&amp;#10;trialdat = [&quot;Trialnumber&quot;, &quot;Winpos&quot;, &quot;Losspos&quot;, &quot;Side&quot;, &quot;Order&quot;, &quot;Choice&quot;, &quot;RT&quot;, &quot;Choiceside&quot;, &quot;Winchosen&quot;, &quot;LossChosen&quot;, &quot;TotalMoney&quot;, &quot;Fixonset&quot;, &quot;Choiceonset&quot;, &quot;Monitoronset&quot;, &quot;Winresonset&quot;, &quot;Lossresonset&quot;, &quot;stima&quot;, &quot;stimb&quot;, &quot;Blocknum&quot;];&amp;#10;writeToFile(dataFile, [&quot;Subject Num&quot;, expInfo[&quot;Subject Num&quot;], &quot;Block Order&quot;, expInfo[&quot;Block Order&quot;], &quot;date&quot;, expInfo[&quot;dateStr&quot;]]);&amp;#10;writeToFile(dataFile, trialdat);&amp;#10;win = new visual.Window(monsize, {&quot;fullscr&quot;: true, &quot;allowGUI&quot;: false, &quot;monitor&quot;: &quot;testMonitor&quot;, &quot;units&quot;: &quot;deg&quot;, &quot;screen&quot;: 1});&amp;#10;stima = new visual.TextStim(psychoJS.window, {&quot;text&quot;: &quot;a&quot;, &quot;units&quot;: &quot;deg&quot;, &quot;color&quot;: &quot;black&quot;, &quot;font&quot;: &quot;agathodaimon&quot;, &quot;height&quot;: stimsize});&amp;#10;stimb = new visual.TextStim(psychoJS.window, {&quot;text&quot;: &quot;b&quot;, &quot;units&quot;: &quot;deg&quot;, &quot;color&quot;: &quot;black&quot;, &quot;font&quot;: &quot;agathodaimon&quot;, &quot;height&quot;: stimsize});&amp;#10;choicebox = new visual.ShapeStim(psychoJS.window, {&quot;units&quot;: &quot;deg&quot;, &quot;lineWidth&quot;: 4, &quot;fillColor&quot;: &quot;grey&quot;, &quot;lineColor&quot;: &quot;black&quot;, &quot;fillColorSpace&quot;: &quot;rgb&quot;, &quot;vertices&quot;: [[(- boxwidth), (- boxwidth)], [(- boxwidth), boxwidth], [boxwidth, boxwidth], [boxwidth, (- boxwidth)]]});&amp;#10;winmes = new visual.TextStim(psychoJS.window, {&quot;text&quot;: &quot;win&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;color&quot;: [0.0, 1.0, 0.0]});&amp;#10;lossmes = new visual.TextStim(psychoJS.window, {&quot;text&quot;: &quot;loss&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;color&quot;: [1.0, 0.0, 0.0]});&amp;#10;fixation = new visual.TextStim(psychoJS.window, {&quot;text&quot;: &quot;X&quot;, &quot;color&quot;: &quot;black&quot;});&amp;#10;tottext = new visual.TextStim(psychoJS.window, {&quot;text&quot;: (&quot;Total \u00a3&quot; + totmon.toString()), &quot;units&quot;: &quot;deg&quot;, &quot;color&quot;: &quot;black&quot;, &quot;height&quot;: 1, &quot;pos&quot;: [0.0, (- 2)]});&amp;#10;if (usetrack) {&amp;#10;    trackname = (expInfo[&quot;Subject Num&quot;].slice(0, 4) + &quot;_t&quot;);&amp;#10;    tracker = new pylinkwrapper.Connect(psychoJS.window, trackname);&amp;#10;    tracker.calibrate();&amp;#10;}&amp;#10;globalClock = new core.Clock();&amp;#10;stimcount = 0;&amp;#10;stima.setText(stimlets[stimcount]);&amp;#10;stimb.setText(stimlets[(stimcount + 1)]);&amp;#10;mouse = new psychoJS.eventManager.Mouse({&quot;visible&quot;: false, &quot;newPos&quot;: null, &quot;win&quot;: psychoJS.window});&amp;#10;pauseclick(&quot;Press left or right to select a shape\nTry to win as much money as possible\n\nClick Either Button to Start&quot;, psychoJS.window, mouse);&amp;#10;taskclock = new core.Clock();&amp;#10;taskclock.reset();&amp;#10;trialhandle = new data.TrialHandler(Sched, {&quot;nReps&quot;: 1, &quot;method&quot;: &quot;sequential&quot;, &quot;dataTypes&quot;: trialdat, &quot;extraInfo&quot;: null, &quot;seed&quot;: null, &quot;originPath&quot;: null, &quot;name&quot;: &quot;&quot;, &quot;autoLog&quot;: true});&amp;#10;if (usetrack) {&amp;#10;    tracker.record_on();&amp;#10;}&amp;#10;ntrial = 0;&amp;#10;for (var thistrial, _pj_c = 0, _pj_a = trialhandle, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    thistrial = _pj_a[_pj_c];&amp;#10;    trialhandle.data.add(&quot;Trialnumber&quot;, (ntrial + 1));&amp;#10;    if (_pj.in_es6(&quot;escape&quot;, psychoJS.eventManager.getKeys())) {&amp;#10;        core.quit();&amp;#10;    }&amp;#10;    trialclock = new core.Clock();&amp;#10;    rtclock = new core.Clock();&amp;#10;    trialclock.reset();&amp;#10;    countDown = new core.CountdownTimer();&amp;#10;    countDown.add(fixdur);&amp;#10;    trialhandle.data.add(&quot;stima&quot;, stima.text);&amp;#10;    trialhandle.data.add(&quot;stimb&quot;, stimb.text);&amp;#10;    fixation.draw();&amp;#10;    tottext.draw();&amp;#10;    fixonset = taskclock.getTime();&amp;#10;    if (usetrack) {&amp;#10;        msg = `Fixation trial ${(ntrial + 1)}`;&amp;#10;        tracker.send_message(msg);&amp;#10;    }&amp;#10;    psychoJS.window.flip();&amp;#10;    while ((countDown.getTime() &gt; 0)) {&amp;#10;    }&amp;#10;    trialhandle.data.add(&quot;Fixonset&quot;, fixonset);&amp;#10;    if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;        stima.setPos([leftstimx, stimy]);&amp;#10;        stimb.setPos([rightstimx, stimy]);&amp;#10;    } else {&amp;#10;        stimb.setPos([leftstimx, stimy]);&amp;#10;        stima.setPos([rightstimx, stimy]);&amp;#10;    }&amp;#10;    fixation.draw();&amp;#10;    tottext.draw();&amp;#10;    stima.draw();&amp;#10;    stimb.draw();&amp;#10;    if (usetrack) {&amp;#10;        msg = `Choice trial ${(ntrial + 1)}`;&amp;#10;        tracker.send_message(msg);&amp;#10;    }&amp;#10;    choiceonset = taskclock.getTime();&amp;#10;    psychoJS.window.flip();&amp;#10;    rtclock.reset();&amp;#10;    left_press = false;&amp;#10;    right_press = false;&amp;#10;    mouse.clickReset();&amp;#10;    while ((! _pj.in_es6(true, [left_press, right_press]))) {&amp;#10;        [[left_press, middle_press, right_press], [left_time, mid_time, right_time]] = mouse.getPressed({&quot;getTime&quot;: true});&amp;#10;    }&amp;#10;    if ((left_press &amp; right_press)) {&amp;#10;        if ((left_time &lt; right_time)) {&amp;#10;            rt = left_time;&amp;#10;            butpress = &quot;left&quot;;&amp;#10;        } else {&amp;#10;            rt = right_time;&amp;#10;            butpress = &quot;right&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;    if (left_press) {&amp;#10;        rt = left_time;&amp;#10;        butpress = &quot;left&quot;;&amp;#10;    }&amp;#10;    if (right_press) {&amp;#10;        rt = right_time;&amp;#10;        butpress = &quot;right&quot;;&amp;#10;    }&amp;#10;    trialhandle.data.add(&quot;Choiceside&quot;, butpress);&amp;#10;    trialhandle.data.add(&quot;RT&quot;, rt);&amp;#10;    trialhandle.data.add(&quot;Choiceonset&quot;, choiceonset);&amp;#10;    if ((butpress === &quot;left&quot;)) {&amp;#10;        choicebox.setPos([leftstimx, stimy]);&amp;#10;        if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;            trialhandle.data.add(&quot;Choice&quot;, 1);&amp;#10;            if ((Sched[ntrial][&quot;winpos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 1);&amp;#10;                totmon = (totmon + winloss);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 0);&amp;#10;            }&amp;#10;            if ((Sched[ntrial][&quot;losspos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 1);&amp;#10;                totmon = (totmon - winloss);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 0);&amp;#10;            }&amp;#10;        } else {&amp;#10;            trialhandle.data.add(&quot;Choice&quot;, 0);&amp;#10;            if ((Sched[ntrial][&quot;winpos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 0);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 1);&amp;#10;                totmon = (totmon + winloss);&amp;#10;            }&amp;#10;            if ((Sched[ntrial][&quot;losspos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 0);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 1);&amp;#10;                totmon = (totmon - winloss);&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        choicebox.setPos([rightstimx, stimy]);&amp;#10;        if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;            trialhandle.data.add(&quot;Choice&quot;, 0);&amp;#10;            if ((Sched[ntrial][&quot;winpos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 0);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 1);&amp;#10;                totmon = (totmon + winloss);&amp;#10;            }&amp;#10;            if ((Sched[ntrial][&quot;losspos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 0);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 1);&amp;#10;                totmon = (totmon - winloss);&amp;#10;            }&amp;#10;        } else {&amp;#10;            trialhandle.data.add(&quot;Choice&quot;, 1);&amp;#10;            if ((Sched[ntrial][&quot;winpos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 1);&amp;#10;                totmon = (totmon + winloss);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Winchosen&quot;, 0);&amp;#10;            }&amp;#10;            if ((Sched[ntrial][&quot;losspos&quot;] === 1)) {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 1);&amp;#10;                totmon = (totmon - winloss);&amp;#10;            } else {&amp;#10;                trialhandle.data.add(&quot;Losschosen&quot;, 0);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    fixation.draw();&amp;#10;    tottext.draw();&amp;#10;    choicebox.draw();&amp;#10;    stima.draw();&amp;#10;    stimb.draw();&amp;#10;    if (usetrack) {&amp;#10;        msg = `Monitor trial ${(ntrial + 1)}`;&amp;#10;        tracker.send_message(msg);&amp;#10;    }&amp;#10;    monitoronset = taskclock.getTime();&amp;#10;    psychoJS.window.flip();&amp;#10;    countDown.reset();&amp;#10;    countDown.add(monitordur);&amp;#10;    while ((countDown.getTime() &gt; 0)) {&amp;#10;    }&amp;#10;    trialhandle.data.add(&quot;Monitoronset&quot;, monitoronset);&amp;#10;    if ((Sched[ntrial][&quot;order&quot;] === 1)) {&amp;#10;        if ((Sched[ntrial][&quot;winpos&quot;] === 1)) {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                winmes.setPos([leftstimx, outy]);&amp;#10;            } else {&amp;#10;                winmes.setPos([rightstimx, outy]);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                winmes.setPos([rightstimx, outy]);&amp;#10;            } else {&amp;#10;                winmes.setPos([leftstimx, outy]);&amp;#10;            }&amp;#10;        }&amp;#10;        fixation.draw();&amp;#10;        tottext.draw();&amp;#10;        choicebox.draw();&amp;#10;        stima.draw();&amp;#10;        stimb.draw();&amp;#10;        winmes.draw();&amp;#10;        if (usetrack) {&amp;#10;            msg = `Win Outcome trial ${(ntrial + 1)}`;&amp;#10;            tracker.send_message(msg);&amp;#10;        }&amp;#10;        winresonset = taskclock.getTime();&amp;#10;        if ((trialhandle.data[&quot;Winchosen&quot;][ntrial] === 1)) {&amp;#10;            winsound.play();&amp;#10;        }&amp;#10;        psychoJS.window.flip();&amp;#10;        countDown.reset();&amp;#10;        if (usejitter) {&amp;#10;            countDown.add(flatjitter(minjit, maxjit, 10));&amp;#10;        } else {&amp;#10;            countDown.add(outcomedur1);&amp;#10;        }&amp;#10;        while ((countDown.getTime() &gt; 0)) {&amp;#10;            core.wait(0.05);&amp;#10;        }&amp;#10;        if ((Sched[ntrial][&quot;losspos&quot;] === 1)) {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                lossmes.setPos([leftstimx, (- outy)]);&amp;#10;            } else {&amp;#10;                lossmes.setPos([rightstimx, (- outy)]);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                lossmes.setPos([rightstimx, (- outy)]);&amp;#10;            } else {&amp;#10;                lossmes.setPos([leftstimx, (- outy)]);&amp;#10;            }&amp;#10;        }&amp;#10;        fixation.draw();&amp;#10;        tottext.draw();&amp;#10;        choicebox.draw();&amp;#10;        stima.draw();&amp;#10;        stimb.draw();&amp;#10;        winmes.draw();&amp;#10;        lossmes.draw();&amp;#10;        if (usetrack) {&amp;#10;            msg = `Loss Outcome trial ${(ntrial + 1)}`;&amp;#10;            tracker.send_message(msg);&amp;#10;        }&amp;#10;        lossresonset = taskclock.getTime();&amp;#10;        if ((trialhandle.data[&quot;Losschosen&quot;][ntrial] === 1)) {&amp;#10;            losssound.play();&amp;#10;        }&amp;#10;        psychoJS.window.flip();&amp;#10;        countDown.reset();&amp;#10;        if (usejitter) {&amp;#10;            countDown.add(flatjitter(minjit, maxjit, 10));&amp;#10;        } else {&amp;#10;            countDown.add(outcomedur2);&amp;#10;        }&amp;#10;        while ((countDown.getTime() &gt; 0)) {&amp;#10;            core.wait(0.05);&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Sched[ntrial][&quot;losspos&quot;] === 1)) {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                lossmes.setPos([leftstimx, (- outy)]);&amp;#10;            } else {&amp;#10;                lossmes.setPos([rightstimx, (- outy)]);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                lossmes.setPos([rightstimx, (- outy)]);&amp;#10;            } else {&amp;#10;                lossmes.setPos([leftstimx, (- outy)]);&amp;#10;            }&amp;#10;        }&amp;#10;        fixation.draw();&amp;#10;        tottext.draw();&amp;#10;        choicebox.draw();&amp;#10;        stima.draw();&amp;#10;        stimb.draw();&amp;#10;        lossmes.draw();&amp;#10;        if (usetrack) {&amp;#10;            msg = `Loss Outcome trial ${(ntrial + 1)}`;&amp;#10;            tracker.send_message(msg);&amp;#10;        }&amp;#10;        lossresonset = taskclock.getTime();&amp;#10;        if ((trialhandle.data[&quot;Losschosen&quot;][ntrial] === 1)) {&amp;#10;            losssound.play();&amp;#10;        }&amp;#10;        psychoJS.window.flip();&amp;#10;        countDown.reset();&amp;#10;        if (usejitter) {&amp;#10;            countDown.add(flatjitter(minjit, maxjit, 10));&amp;#10;        } else {&amp;#10;            countDown.add(outcomedur2);&amp;#10;        }&amp;#10;        while ((countDown.getTime() &gt; 0)) {&amp;#10;            core.wait(0.05);&amp;#10;        }&amp;#10;        if ((Sched[ntrial][&quot;winpos&quot;] === 1)) {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                winmes.setPos([leftstimx, outy]);&amp;#10;            } else {&amp;#10;                winmes.setPos([rightstimx, outy]);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Sched[ntrial][&quot;side&quot;] === 1)) {&amp;#10;                winmes.setPos([rightstimx, outy]);&amp;#10;            } else {&amp;#10;                winmes.setPos([leftstimx, outy]);&amp;#10;            }&amp;#10;        }&amp;#10;        fixation.draw();&amp;#10;        tottext.draw();&amp;#10;        choicebox.draw();&amp;#10;        stima.draw();&amp;#10;        stimb.draw();&amp;#10;        lossmes.draw();&amp;#10;        winmes.draw();&amp;#10;        if (usetrack) {&amp;#10;            msg = `Win Outcome trial ${(ntrial + 1)}`;&amp;#10;            tracker.send_message(msg);&amp;#10;        }&amp;#10;        winresonset = taskclock.getTime();&amp;#10;        if ((trialhandle.data[&quot;Winchosen&quot;][ntrial] === 1)) {&amp;#10;            winsound.play();&amp;#10;        }&amp;#10;        psychoJS.window.flip();&amp;#10;        countDown.reset();&amp;#10;        if (usejitter) {&amp;#10;            countDown.add(flatjitter(minjit, maxjit, 10));&amp;#10;        } else {&amp;#10;            countDown.add(outcomedur1);&amp;#10;        }&amp;#10;        while ((countDown.getTime() &gt; 0)) {&amp;#10;            core.wait(0.05);&amp;#10;        }&amp;#10;    }&amp;#10;    trialhandle.data.add(&quot;Winresonset&quot;, winresonset);&amp;#10;    trialhandle.data.add(&quot;Lossresonset&quot;, lossresonset);&amp;#10;    trialhandle.data.add(&quot;TotalMoney&quot;, totmon);&amp;#10;    tottext.setText((&quot;Total \u00a3&quot; + totmon.toString()));&amp;#10;    td = trialhandle.data;&amp;#10;    writeToFile(dataFile, list([Number.parseInt(td[&quot;Trialnumber&quot;][ntrial]), Sched[ntrial][&quot;winpos&quot;], Sched[ntrial][&quot;losspos&quot;], Sched[ntrial][&quot;side&quot;], Sched[ntrial][&quot;order&quot;], Number.parseInt(td[&quot;Choice&quot;][ntrial]), Number.parseFloat(td[&quot;RT&quot;][ntrial]), &quot;&quot;.join(td[&quot;Choiceside&quot;][ntrial]), Number.parseInt(td[&quot;Winchosen&quot;][ntrial]), Number.parseInt(td[&quot;Losschosen&quot;][ntrial]), totmon, fixonset, choiceonset, monitoronset, winresonset, lossresonset, stima.text, stimb.text, blocknum]));&amp;#10;    ntrial += 1;&amp;#10;    if (any(map((x) =&gt; {&amp;#10;    return (ntrial === x);&amp;#10;}, np.cumsum(blocklength.slice(0, (- 1)))))) {&amp;#10;        blocknum += 1;&amp;#10;        stimcount = (stimcount + 2);&amp;#10;        stima.setText(stimlets[stimcount]);&amp;#10;        stimb.setText(stimlets[(stimcount + 1)]);&amp;#10;        pauseclick(&quot;Rest Session\nPress Either Button to Restart&quot;, psychoJS.window, mouse);&amp;#10;    }&amp;#10;}&amp;#10;if (usetrack) {&amp;#10;    tracker.record_off();&amp;#10;    tracker.end_experiment(os.path.join(main_dir, &quot;results&quot;, &quot;tracker&quot;));&amp;#10;    os.rename(os.path.join(main_dir, &quot;results&quot;, &quot;tracker&quot;, (trackname + &quot;.edf&quot;)), os.path.join(main_dir, &quot;results&quot;, &quot;tracker&quot;, (fileName + &quot;_tracker.edf&quot;)));&amp;#10;}&amp;#10;trialhandle.saveAsText(os.path.join(main_dir, &quot;results&quot;, fileName), {&quot;dataOut&quot;: [&quot;Choice_raw&quot;, &quot;Choiceside_raw&quot;, &quot;RT_raw&quot;, &quot;Winchosen_raw&quot;, &quot;Losschosen_raw&quot;]});&amp;#10;psychoJS.window.close();&amp;#10;core.quit();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Start">
      <PolygonComponent name="InstrBkg">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="InstrBkg" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="PreCondImage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$PreCondInstTextImage" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="PreCondImage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[0,0.05]" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[0.45,0.9]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="PreCondInstEN">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Helvetica" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="PreCondInstEN" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="[0,0.7]" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$isChinese==False" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$PreCondInstTextEN" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="PreCondInstCN">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="PingFang SC" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.1" valType="num" updates="constant" name="letterHeight"/>
        <Param val="PreCondInstCN" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.2,0.7)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$isChinese==True" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$PreCondInstTextCN" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="InstrKeyResp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="InstrKeyResp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <MouseComponent name="PreCondMouse">
        <Param val="" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="PreCondMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ButtonComponent name="PreCondSubmit">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="0" valType="num" updates="constant" name="borderWidth"/>
        <Param val="" valType="extendedCode" updates="constant" name="callback"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="0.8824, 0.6392, 0.4432" valType="color" updates="constant" name="fillColor"/>
        <Param val="Helvetica" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="0.06" valType="num" updates="constant" name="letterHeight"/>
        <Param val="PreCondSubmit" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="oncePerClick"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="" valType="num" updates="constant" name="padding"/>
        <Param val="[0.7, -0.8]" valType="list" updates="constant" name="pos"/>
        <Param val="every click" valType="str" updates="None" name="save"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[0.3, 0.1]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="CONTINUE" valType="str" updates="constant" name="text"/>
        <Param val="button onset" valType="str" updates="constant" name="timeRelativeTo"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ButtonComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'PreCondInstTextEN': 'Please sit comfortably and focus on the screen at all times.', 'PreCondInstTextCN': '请舒适地坐着，并始终专注于屏幕。', 'PreCondInstTextImage': 'Stimuli/Raw_black.BMP', 'CondInstTextEN': 'Again, faces will appear on the screen, of which some may feel unpleasant. Plase continue to look at the screen.', 'CondInstTextCN': '同样，屏幕上会出现一些面孔，其中一些可能会让人感到不愉快。请继续看屏幕。', 'CondInstTextImage': 'Stimuli/Raw_black.BMP', 'ExtInstTextEN': 'Before we continue, feel free to take a break of 5-10 minutes,', 'ExtInstTextCN': '在我们继续之前，请放心地休息5-10分钟、', 'ExtInstTextImage': 'Stimuli/Raw_black.BMP', 'EndTextEN': 'Thank you!', 'EndTextCN': '测试结束，请叫医生'}, {'PreCondInstTextEN': 'You will see different faces appear on the screen. Please carefully observe them.', 'PreCondInstTextCN': '你会看到屏幕上出现不同的面孔。请仔细观察它们。', 'PreCondInstTextImage': 'Stimuli/Raw_black.BMP', 'CondInstTextEN': 'When you see the face below, please press SPACE as fast as you can', 'CondInstTextCN': None, 'CondInstTextImage': 'Stimuli/Raw_Trig.BMP', 'ExtInstTextEN': 'Again, you will see different faces appear on the screen. Please carefully observe them.', 'ExtInstTextCN': None, 'ExtInstTextImage': 'Stimuli/Raw_black.BMP', 'EndTextEN': None, 'EndTextCN': None}, {'PreCondInstTextEN': 'When you see the face below, please press SPACE as fast as you can', 'PreCondInstTextCN': None, 'PreCondInstTextImage': 'Stimuli/Raw_Trig.BMP', 'CondInstTextEN': 'Once you are ready, press CONTINUE', 'CondInstTextCN': None, 'CondInstTextImage': 'Stimuli/Raw_black.BMP', 'ExtInstTextEN': 'When you see the face below, please press SPACE as fast as you can', 'ExtInstTextCN': None, 'ExtInstTextImage': 'Stimuli/Raw_Trig.BMP', 'EndTextEN': None, 'EndTextCN': None}, {'PreCondInstTextEN': 'Once you are ready, press CONTINUE', 'PreCondInstTextCN': None, 'PreCondInstTextImage': 'Stimuli/Raw_black.BMP', 'CondInstTextEN': None, 'CondInstTextCN': None, 'CondInstTextImage': None, 'ExtInstTextEN': 'Once you are ready, press CONTINUE', 'ExtInstTextCN': None, 'ExtInstTextImage': 'Stimuli/Raw_black.BMP', 'EndTextEN': None, 'EndTextCN': None}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="0_Instructions.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Start"/>
    <LoopTerminator name="trials"/>
    <Routine name="trial"/>
  </Flow>
</PsychoPy2experiment>
